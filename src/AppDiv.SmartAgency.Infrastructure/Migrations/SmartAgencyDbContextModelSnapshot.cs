// <auto-generated />
using System;
using AppDiv.SmartAgency.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDiv.SmartAgency.Infrastructure.Migrations
{
    [DbContext(typeof(SmartAgencyDbContext))]
    partial class SmartAgencyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AmharicFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ArabicFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Branch")
                        .HasColumnType("longtext");

                    b.Property<string>("BrokerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Complexion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContractPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrentNationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DesiredCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuedPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IssuingCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitleAmharic")
                        .HasColumnType("longtext");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("PartnerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreviousCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReligionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("RepersentativeId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PartnerId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("RepersentativeId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("RelationshipId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AwardLookUpId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionalSkill")
                        .HasColumnType("longtext");

                    b.Property<string>("QualificationTypeLookUpId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("YearCompleted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwardLookUpId")
                        .IsUnique();

                    b.HasIndex("QualificationTypeLookUpId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CountryLookupId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PeriodLength")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CountryLookupId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LanguageAbility")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LanguageLookUpId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageLookUpId")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Repersentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.TechnicalSkill", b =>
                {
                    b.Property<string>("TechnicalSkillApplicantsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TechnicalSkillsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicantTechnicalSkillId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LookUpTechnicalSkillId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("TechnicalSkillApplicantsId", "TechnicalSkillsId");

                    b.HasIndex("ApplicantTechnicalSkillId");

                    b.HasIndex("LookUpTechnicalSkillId");

                    b.HasIndex("TechnicalSkillsId");

                    b.ToTable("TechnicalSkill");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Witness");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalInfoId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShowOnCv")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Audit.AuditLog", b =>
                {
                    b.Property<string>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuditData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AuditUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Enviroment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Kebele")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AttachmentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("AttachmentFiles");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "d4147e2c-c533-4814-a942-cb47d989fc8d",
                            Name = "Country"
                        },
                        new
                        {
                            Id = "3a4b399e-c03e-4f2b-bbc4-6446370c774f",
                            Name = "Qualification Type"
                        },
                        new
                        {
                            Id = "af07a472-0f13-48d1-8116-d5b3866e4922",
                            Name = "Language"
                        },
                        new
                        {
                            Id = "4c1a05e4-a46e-4836-b440-1df5a47c8015",
                            Name = "Award"
                        },
                        new
                        {
                            Id = "17f5be35-9f47-42e4-a475-fa98df65de8c",
                            Name = "Skill"
                        });
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<string>("SuffixId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SuffixId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderLogo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerNameAmharic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameAmharic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameArabic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 4, 28, 16, 34, 10, 544, DateTimeKind.Local).AddTicks(1587));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IDX_UQ_Suffix")
                        .IsUnique();

                    b.ToTable("Suffixes");
                });

            modelBuilder.Entity("ApplicantEducation", b =>
                {
                    b.Property<string>("ApplicantEducationsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EducationApplicantsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ApplicantEducationsId", "EducationApplicantsId");

                    b.HasIndex("EducationApplicantsId");

                    b.ToTable("ApplicantEducation");
                });

            modelBuilder.Entity("ApplicantLanguage", b =>
                {
                    b.Property<string>("ApplicantsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LanguagesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ApplicantsId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("ApplicantLanguage");
                });

            modelBuilder.Entity("ApplicantLookUp", b =>
                {
                    b.Property<string>("ApplicantJobTitlesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LookUpJobTitlesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ApplicantJobTitlesId", "LookUpJobTitlesId");

                    b.HasIndex("LookUpJobTitlesId");

                    b.ToTable("ApplicantLookUp");
                });

            modelBuilder.Entity("ApplicantWitness", b =>
                {
                    b.Property<string>("ApplicantsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WitnessesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ApplicantsId", "WitnessesId");

                    b.HasIndex("WitnessesId");

                    b.ToTable("ApplicantWitness");
                });

            modelBuilder.Entity("EducationLookUp", b =>
                {
                    b.Property<string>("LevelOfEducationsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LevelofEducationLookUpsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("LevelOfEducationsId", "LevelofEducationLookUpsId");

                    b.HasIndex("LevelofEducationLookUpsId");

                    b.ToTable("EducationLookUp");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressApplicant")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Partner", "Partner")
                        .WithMany("Applicants")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Religion")
                        .WithMany("ApplicantReligions")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", "Repersentative")
                        .WithMany("RepresentativeApplicants")
                        .HasForeignKey("RepersentativeId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Address");

                    b.Navigation("Partner");

                    b.Navigation("Religion");

                    b.Navigation("Repersentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("BankAccount")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Relationship")
                        .WithMany("BeneficiaryRelationShip")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "AwardLookUp")
                        .WithOne("AwardEducation")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "AwardLookUpId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "QualificationTypeLookUp")
                        .WithMany("QualificationTypeEducations")
                        .HasForeignKey("QualificationTypeLookUpId");

                    b.Navigation("AwardLookUp");

                    b.Navigation("QualificationTypeLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressEmergContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("EmergencyContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Experiences")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "CountryLookup")
                        .WithMany("LookupExpeeriences")
                        .HasForeignKey("CountryLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("CountryLookup");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LanguageLookUp")
                        .WithOne("LookupLanguage")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", "LanguageLookUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressRepresentative")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.TechnicalSkill", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "ApplicantTechnicalSkill")
                        .WithMany()
                        .HasForeignKey("ApplicantTechnicalSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUpTechnicalSkill")
                        .WithMany()
                        .HasForeignKey("LookUpTechnicalSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("TechnicalSkillApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", null)
                        .WithMany()
                        .HasForeignKey("TechnicalSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantTechnicalSkill");

                    b.Navigation("LookUpTechnicalSkill");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "ApplicantAttachmentFile")
                        .WithMany("AttachmentFiles")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Attachment", "Attachment")
                        .WithOne("AttachmentFile")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantAttachmentFile");

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", "Suffix")
                        .WithMany()
                        .HasForeignKey("SuffixId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("Suffix");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Category", "Category")
                        .WithMany("LookUps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ApplicantEducation", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", null)
                        .WithMany()
                        .HasForeignKey("ApplicantEducationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("EducationApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicantLanguage", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicantLookUp", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantJobTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", null)
                        .WithMany()
                        .HasForeignKey("LookUpJobTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicantWitness", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", null)
                        .WithMany()
                        .HasForeignKey("WitnessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationLookUp", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", null)
                        .WithMany()
                        .HasForeignKey("LevelOfEducationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", null)
                        .WithMany()
                        .HasForeignKey("LevelofEducationLookUpsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Navigation("AttachmentFiles");

                    b.Navigation("BankAccount");

                    b.Navigation("Beneficiaries");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.Navigation("RepresentativeApplicants");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Navigation("AttachmentFile")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Navigation("AddressApplicant")
                        .IsRequired();

                    b.Navigation("AddressEmergContact");

                    b.Navigation("AddressRepresentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Category", b =>
                {
                    b.Navigation("LookUps");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Navigation("ApplicantReligions");

                    b.Navigation("AwardEducation");

                    b.Navigation("BeneficiaryRelationShip");

                    b.Navigation("LookupExpeeriences");

                    b.Navigation("LookupLanguage");

                    b.Navigation("QualificationTypeEducations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Applicants");
                });
#pragma warning restore 612, 618
        }
    }
}
