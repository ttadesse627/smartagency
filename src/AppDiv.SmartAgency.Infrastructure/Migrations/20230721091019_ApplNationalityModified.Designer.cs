// <auto-generated />
using System;
using AppDiv.SmartAgency.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDiv.SmartAgency.Infrastructure.Migrations
{
    [DbContext(typeof(SmartAgencyDbContext))]
    [Migration("20230721091019_ApplNationalityModified")]
    partial class ApplNationalityModified
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicantFollowupStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FollowupStatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FollowupStatusId");

                    b.ToTable("ApplicantFollowupStatuses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicantProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProcessDefinitionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ProcessDefinitionId");

                    b.ToTable("ApplicantProcesses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AmharicFullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AmharicJobTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("ArabicFullName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BrokerNameId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Complexion")
                        .HasColumnType("longtext");

                    b.Property<int>("ContractPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CurrentNationalityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DesiredCountryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ExperienceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("HealthId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IssuingCountryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("JobtitleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MaritalStatusId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherName")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PassportIssuedPlaceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreviousNationality")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SalaryId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BranchId");

                    b.HasIndex("BrokerNameId");

                    b.HasIndex("CurrentNationalityId");

                    b.HasIndex("DesiredCountryId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("HealthId");

                    b.HasIndex("IssuingCountryId");

                    b.HasIndex("JobtitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PassportIssuedPlaceId");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.HasIndex("ReligionId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("LookUpId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RelationshipId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionalSkill")
                        .HasColumnType("longtext");

                    b.Property<int>("YearCompleted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ArabicName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NameOfContactPerson")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RelationshipId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("RelationshipId");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PeriodLength")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CountryId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LanguageSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("CanListen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanSpeak")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Proficiency")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageSkills");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LevelOfQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("LookUpId");

                    b.ToTable("LevelOfQualifications");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.QualificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("LookUpId");

                    b.ToTable("QualificationTypes");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Representative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Kebele")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LookUpId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyInformationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CompanyInformationId");

                    b.ToTable("Witnesses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Otp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OtpExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordResetOtp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetOtpExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PositionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowOnCv")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuditData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("AuditUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Enviroment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AlternativePhone")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Kebele")
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("SubCity")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AssurancePolicyNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyNameAmharic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyNameArabic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CountriesOperation")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralManager")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralManagerAmharic")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ViceManager")
                        .HasColumnType("longtext");

                    b.Property<string>("ViceManagerAmharic")
                        .HasColumnType("longtext");

                    b.Property<string>("licenseNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("CompanyInformations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CompanySetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AmountOfDeposit")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizedPerson")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CompanyInformationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("FileNumberStartFrom")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("PenalityAmount")
                        .HasColumnType("int");

                    b.Property<int>("PenalityInterval")
                        .HasColumnType("int");

                    b.Property<int>("PrintedDocumentSubmitDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInformationId")
                        .IsUnique();

                    b.ToTable("CompanySettings");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CountryOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyInformationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("VisaExpiryDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInformationId");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("CountryOperations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<Guid?>("SuffixId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SuffixId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<double>("DepositAmount")
                        .HasColumnType("double");

                    b.Property<string>("DepositedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Month")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Enjaz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("ApplicationNumber")
                        .IsUnique();

                    b.ToTable("Enjazs");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.OnlineApplicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("DesiredCountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ExperienceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MaritalStatusId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DesiredCountryId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("OnlineApplicants");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ContractDuration")
                        .HasColumnType("int");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ElectronicVisaDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfVisa")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PortOfArrivalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("VisaDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VisaNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("VisaTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PortOfArrivalId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("VisaTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.OrderCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExperienceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("JobTitleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("NationalityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SalaryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ReligionId");

                    b.HasIndex("SalaryId");

                    b.ToTable("OrderCriterias");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullNameAmharic")
                        .HasColumnType("longtext");

                    b.Property<string>("FullNameArabic")
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfFamily")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OtherName")
                        .HasColumnType("longtext");

                    b.Property<string>("ResidentialTitle")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("AttachmentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PageContent")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerNameAmharic")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameAmharic")
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameArabic")
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("EnjazRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<bool>("VisaRequired")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(4789),
                            EnjazRequired = false,
                            Name = "Ticket Process",
                            Step = 100,
                            VisaRequired = true
                        });
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ProcessDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("ExpiryInterval")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("RequestApproval")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00fa1a8e-ac70-400e-8f37-20010f81a27a"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(4992),
                            ExpiryInterval = 0,
                            Name = "Ready to Issue Ticket",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 0
                        },
                        new
                        {
                            Id = new Guid("1dc479ab-fe84-4ca8-828f-9a21de7434e7"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5005),
                            ExpiryInterval = 0,
                            Name = "Register Ticket",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 1
                        },
                        new
                        {
                            Id = new Guid("2d9ef769-6d03-4406-9849-430ff9723778"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5020),
                            ExpiryInterval = 0,
                            Name = "Refund Ticket",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 2
                        },
                        new
                        {
                            Id = new Guid("3048b353-039d-41b6-8690-a9aaa2e679cf"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5024),
                            ExpiryInterval = 0,
                            Name = "Rebook Ticket",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 3
                        },
                        new
                        {
                            Id = new Guid("4048b353-039d-41b6-8690-a9aaa2e679cf"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5028),
                            ExpiryInterval = 0,
                            Name = "Register Rebook Ticket",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 4
                        },
                        new
                        {
                            Id = new Guid("5b912c00-9df3-47a1-a525-410abf239616"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5034),
                            ExpiryInterval = 0,
                            Name = "Travel",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = false,
                            Step = 2
                        },
                        new
                        {
                            Id = new Guid("6b912c00-9df3-47a1-a524-410abf239616"),
                            CreatedAt = new DateTime(2023, 7, 21, 12, 10, 19, 25, DateTimeKind.Local).AddTicks(5038),
                            ExpiryInterval = 0,
                            Name = "Traveled",
                            ProcessId = new Guid("60209c9d-47b4-497b-8abd-94a753814a86"),
                            RequestApproval = true,
                            Step = 3
                        });
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.RevocationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RevocationTokens");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ValueStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 7, 21, 12, 10, 19, 18, DateTimeKind.Local).AddTicks(9379));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IDX_UQ_Suffix")
                        .IsUnique();

                    b.ToTable("Suffixes");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketReady", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DateInterval")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TicketOfficeId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("TicketOfficeId");

                    b.ToTable("TicketReadies");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("DateInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("TicketRebooks");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebookReg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AirLineId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartureTime")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FlightDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketPrice")
                        .HasColumnType("longtext");

                    b.Property<string>("Transit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("TicketRebookRegistrations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRefund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("DateInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("TicketRefunds");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AirLineId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("longtext");

                    b.Property<string>("DepartureTime")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("FlightDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TicketPrice")
                        .HasColumnType("longtext");

                    b.Property<string>("Transit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("TicketRegistrations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TraveledApplicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("TraveledApplicants");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DescriptionStr")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("RolesStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ApplicantAttachment", b =>
                {
                    b.Property<Guid>("ApplicantsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachmentsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ApplicantsId", "AttachmentsId");

                    b.HasIndex("AttachmentsId");

                    b.ToTable("ApplicantAttachment");
                });

            modelBuilder.Entity("ApplicationUserUserGroup", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ApplicationUsersId", "UserGroupsId");

                    b.HasIndex("UserGroupsId");

                    b.ToTable("ApplicationUserUserGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicantFollowupStatus", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("ApplicantFollowupStatuses")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "FollowupStatus")
                        .WithMany("FollowupStatus")
                        .HasForeignKey("FollowupStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("FollowupStatus");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicantProcess", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("ApplicantProcesses")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ProcessDefinition", "ProcessDefinition")
                        .WithMany("ApplicantProcesses")
                        .HasForeignKey("ProcessDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("ProcessDefinition");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("Applicant")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Branch")
                        .WithMany("ApplBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "BrokerName")
                        .WithMany("ApplBrokerNames")
                        .HasForeignKey("BrokerNameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "CurrentNationality")
                        .WithMany("ApplCurrentNationalities")
                        .HasForeignKey("CurrentNationalityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "DesiredCountry")
                        .WithMany("ApplDesiredCountries")
                        .HasForeignKey("DesiredCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Experience")
                        .WithMany("ApplExperiences")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Health")
                        .WithMany("ApplHealthes")
                        .HasForeignKey("HealthId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "IssuingCountry")
                        .WithMany("ApplIssuingCountries")
                        .HasForeignKey("IssuingCountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Jobtitle")
                        .WithMany("ApplJobtitles")
                        .HasForeignKey("JobtitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Language")
                        .WithMany("ApplLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "MaritalStatus")
                        .WithMany("ApplMaritalStatuses")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Orders.Order", "Order")
                        .WithMany("Employees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Partner", "Partner")
                        .WithMany("Applicants")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "PassportIssuedPlace")
                        .WithMany("ApplPassportIssuedPlaces")
                        .HasForeignKey("PassportIssuedPlaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Religion")
                        .WithMany("ApplReligions")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Salary")
                        .WithMany("ApplSalaries")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Branch");

                    b.Navigation("BrokerName");

                    b.Navigation("CurrentNationality");

                    b.Navigation("DesiredCountry");

                    b.Navigation("Experience");

                    b.Navigation("Health");

                    b.Navigation("IssuingCountry");

                    b.Navigation("Jobtitle");

                    b.Navigation("Language");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Order");

                    b.Navigation("Partner");

                    b.Navigation("PassportIssuedPlace");

                    b.Navigation("Religion");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Award", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "Education")
                        .WithMany("Awards")
                        .HasForeignKey("EducationId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUp")
                        .WithMany("Awards")
                        .HasForeignKey("LookUpId");

                    b.Navigation("Education");

                    b.Navigation("LookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("BankAccount")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Relationship")
                        .WithMany("BenRelationShips")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Applicant");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("Education")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("EmergencyContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("EmergencyContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Relationship")
                        .WithMany("ECRelationships")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Applicant");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Experiences")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Country")
                        .WithMany("ExpCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Applicant");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LanguageSkill", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("LanguageSkills")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Language")
                        .WithMany("LanguageSkills")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Applicant");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LevelOfQualification", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "Education")
                        .WithMany("LevelOfQualifications")
                        .HasForeignKey("EducationId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUp")
                        .WithMany("LevelOfQualifications")
                        .HasForeignKey("LookUpId");

                    b.Navigation("Education");

                    b.Navigation("LookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.QualificationType", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "Education")
                        .WithMany("QualificationTypes")
                        .HasForeignKey("EducationId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUp")
                        .WithMany("QualificationTypes")
                        .HasForeignKey("LookUpId");

                    b.Navigation("Education");

                    b.Navigation("LookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Representative", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("Representative")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Representative", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Skill", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Skills")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUp")
                        .WithMany("Skills")
                        .HasForeignKey("LookUpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("LookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Witnesses")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", "CompanyInformation")
                        .WithMany("Witnesses")
                        .HasForeignKey("CompanyInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");

                    b.Navigation("CompanyInformation");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Branch")
                        .WithMany("UserBranch")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Partner", "Partner")
                        .WithMany("Users")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Position")
                        .WithMany("UserPosition")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Branch");

                    b.Navigation("Partner");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "City")
                        .WithMany("Cities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Country")
                        .WithMany("Countries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Region")
                        .WithMany("Regions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("CompanyInformation")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CompanySetting", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", "CompanyInformation")
                        .WithOne("CompanySetting")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.CompanySetting", "CompanyInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CompanyInformation");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Complaint", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Complaints")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CountryOperation", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", "CompanyInformation")
                        .WithMany("CountryOperations")
                        .HasForeignKey("CompanyInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUpCountryOperation")
                        .WithOne("CountryOperation")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.CountryOperation", "CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CompanyInformation");

                    b.Navigation("LookUpCountryOperation");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", "Suffix")
                        .WithMany()
                        .HasForeignKey("SuffixId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("Suffix");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Deposit", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Deposits")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Enjaz", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("Enjaz")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Enjaz", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LoginHistory", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", "User")
                        .WithMany("LoginHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.OnlineApplicant", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "DesiredCountry")
                        .WithMany("OnlineApplDesiredCountries")
                        .HasForeignKey("DesiredCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Experience")
                        .WithMany("Experience")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "MaritalStatus")
                        .WithMany("MaritalStatus")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesiredCountry");

                    b.Navigation("Experience");

                    b.Navigation("MaritalStatus");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Attachment", "Attachment")
                        .WithMany("Orders")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Partner", "Partner")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "PortOfArrival")
                        .WithMany("LookUpPortOfArrivals")
                        .HasForeignKey("PortOfArrivalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Priority")
                        .WithMany("LookUpPriorities")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "VisaType")
                        .WithMany("LookUpVisaTypes")
                        .HasForeignKey("VisaTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Attachment");

                    b.Navigation("Partner");

                    b.Navigation("PortOfArrival");

                    b.Navigation("Priority");

                    b.Navigation("VisaType");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.OrderCriteria", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Experience")
                        .WithMany("LookUpCriteriaExperiences")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "JobTitle")
                        .WithMany("LookUpCriteriaJobTitles")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Language")
                        .WithMany("LookUpCriteriaLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Nationality")
                        .WithMany("LookUpCriteriaNationalities")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Orders.Order", "Order")
                        .WithOne("OrderCriteria")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Orders.OrderCriteria", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Religion")
                        .WithMany("LookUpCriteriaReligions")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Salary")
                        .WithMany("LookUpCriteriaSalaries")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Experience");

                    b.Navigation("JobTitle");

                    b.Navigation("Language");

                    b.Navigation("Nationality");

                    b.Navigation("Order");

                    b.Navigation("Religion");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Payment", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Orders.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Orders.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Sponsor", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("Sponsor")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Orders.Sponsor", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Attachment", "Attachment")
                        .WithMany("Sponsors")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Orders.Order", "Order")
                        .WithOne("Sponsor")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Orders.Sponsor", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");

                    b.Navigation("Attachment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("Partner")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Partner", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Process", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Country")
                        .WithMany("ProcessCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ProcessDefinition", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Process", "Process")
                        .WithMany("ProcessDefinitions")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketReady", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TicketReady")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketReady", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "TicketOffice")
                        .WithMany()
                        .HasForeignKey("TicketOfficeId");

                    b.Navigation("Applicant");

                    b.Navigation("TicketOffice");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebook", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TicketRebook")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebook", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebookReg", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "AirLine")
                        .WithMany()
                        .HasForeignKey("AirLineId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TicketRebookRegistration")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRebookReg", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AirLine");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRefund", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TicketRefund")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRefund", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRegistration", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "AirLine")
                        .WithMany()
                        .HasForeignKey("AirLineId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TicketRegistration")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TicketRegistration", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AirLine");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.TicketData.TraveledApplicant", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("TraveledApplicant")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.TicketData.TraveledApplicant", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("ApplicantAttachment", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserUserGroup", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Navigation("ApplicantFollowupStatuses");

                    b.Navigation("ApplicantProcesses");

                    b.Navigation("BankAccount");

                    b.Navigation("Beneficiaries");

                    b.Navigation("Complaints");

                    b.Navigation("Deposits");

                    b.Navigation("Education");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Enjaz");

                    b.Navigation("Experiences");

                    b.Navigation("LanguageSkills");

                    b.Navigation("Representative");

                    b.Navigation("Skills");

                    b.Navigation("TicketReady");

                    b.Navigation("TicketRebook");

                    b.Navigation("TicketRebookRegistration");

                    b.Navigation("TicketRefund");

                    b.Navigation("TicketRegistration");

                    b.Navigation("TraveledApplicant");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("LevelOfQualifications");

                    b.Navigation("QualificationTypes");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("LoginHistories");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Sponsors");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Navigation("Applicant");

                    b.Navigation("ApplicationUser");

                    b.Navigation("CompanyInformation");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Partner");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.CompanyInformation", b =>
                {
                    b.Navigation("CompanySetting");

                    b.Navigation("CountryOperations");

                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Navigation("ApplBranches");

                    b.Navigation("ApplBrokerNames");

                    b.Navigation("ApplCurrentNationalities");

                    b.Navigation("ApplDesiredCountries");

                    b.Navigation("ApplExperiences");

                    b.Navigation("ApplHealthes");

                    b.Navigation("ApplIssuingCountries");

                    b.Navigation("ApplJobtitles");

                    b.Navigation("ApplLanguages");

                    b.Navigation("ApplMaritalStatuses");

                    b.Navigation("ApplPassportIssuedPlaces");

                    b.Navigation("ApplReligions");

                    b.Navigation("ApplSalaries");

                    b.Navigation("Awards");

                    b.Navigation("BenRelationShips");

                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("CountryOperation");

                    b.Navigation("ECRelationships");

                    b.Navigation("ExpCountries");

                    b.Navigation("Experience");

                    b.Navigation("FollowupStatus");

                    b.Navigation("LanguageSkills");

                    b.Navigation("LevelOfQualifications");

                    b.Navigation("LookUpCriteriaExperiences");

                    b.Navigation("LookUpCriteriaJobTitles");

                    b.Navigation("LookUpCriteriaLanguages");

                    b.Navigation("LookUpCriteriaNationalities");

                    b.Navigation("LookUpCriteriaReligions");

                    b.Navigation("LookUpCriteriaSalaries");

                    b.Navigation("LookUpPortOfArrivals");

                    b.Navigation("LookUpPriorities");

                    b.Navigation("LookUpVisaTypes");

                    b.Navigation("MaritalStatus");

                    b.Navigation("OnlineApplDesiredCountries");

                    b.Navigation("ProcessCountries");

                    b.Navigation("QualificationTypes");

                    b.Navigation("Regions");

                    b.Navigation("Skills");

                    b.Navigation("UserBranch");

                    b.Navigation("UserPosition");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OrderCriteria");

                    b.Navigation("Payment");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Applicants");

                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Process", b =>
                {
                    b.Navigation("ProcessDefinitions");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ProcessDefinition", b =>
                {
                    b.Navigation("ApplicantProcesses");
                });
#pragma warning restore 612, 618
        }
    }
}
