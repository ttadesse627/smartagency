// <auto-generated />
using System;
using AppDiv.SmartAgency.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDiv.SmartAgency.Infrastructure.Migrations
{
    [DbContext(typeof(SmartAgencyDbContext))]
    [Migration("20230503110717_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AmharicFullName")
                        .HasColumnType("longtext");

                    b.Property<string>("ArabicFullName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Branch")
                        .HasColumnType("longtext");

                    b.Property<string>("BrokerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Complexion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContractPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrentNationality")
                        .HasColumnType("longtext");

                    b.Property<string>("DesiredCountry")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequested")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuedPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("IssuingCountry")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitleAmharic")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherFullName")
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("longtext");

                    b.Property<string>("PreviousCountry")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ReligionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("RepersentativeId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PartnerId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("RepersentativeId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.AppLookJobtitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantJobtitleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LookUpJobtitleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantJobtitleId");

                    b.HasIndex("LookUpJobtitleId");

                    b.ToTable("AppLookJobtitle");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AwardEducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AwardLookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AwardEducationId");

                    b.HasIndex("AwardLookUpId")
                        .IsUnique();

                    b.ToTable("Award");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("Beneficiary");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EducationApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FieldOfStudy")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionalSkill")
                        .HasColumnType("longtext");

                    b.Property<int>("YearCompleted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationApplicantId")
                        .IsUnique();

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryLookupId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PeriodLength")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CountryLookupId")
                        .IsUnique();

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AbilityJson")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LanguageLookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("LanguageLookUpId")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LevelOfQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LevelOfQualificationEducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LevelOfQualificationLookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LevelOfQualificationEducationId");

                    b.HasIndex("LevelOfQualificationLookUpId")
                        .IsUnique();

                    b.ToTable("LevelOfQualification");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.QualificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("QualificationTypeEducationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("QualificationTypeLookUpId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("QualificationTypeEducationId");

                    b.HasIndex("QualificationTypeLookUpId")
                        .IsUnique();

                    b.ToTable("QualificationType");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Repersentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.TechnicalSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ApplicantTechnicalSkillId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("LookUpTechnicalSkillId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantTechnicalSkillId");

                    b.HasIndex("LookUpTechnicalSkillId")
                        .IsUnique();

                    b.ToTable("TechnicalSkill");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Witness");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalInfoId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShowOnCv")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuditData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("AuditUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Enviroment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Kebele")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.Property<string>("Woreda")
                        .HasColumnType("longtext");

                    b.Property<string>("Zone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("AttachmentFiles");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da1d41e4-9873-4910-9e1a-510a9fe50a3c"),
                            Name = "Category"
                        });
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("");

                    b.Property<Guid?>("SuffixId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("SuffixId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("LookUps");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderLogo")
                        .HasColumnType("longtext");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerNameAmharic")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameAmharic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerNameArabic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PartnerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 5, 3, 14, 7, 16, 946, DateTimeKind.Local).AddTicks(1531));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IDX_UQ_Suffix")
                        .IsUnique();

                    b.ToTable("Suffixes");
                });

            modelBuilder.Entity("ApplicantWitness", b =>
                {
                    b.Property<Guid>("ApplicantsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WitnessesId")
                        .HasColumnType("char(36)");

                    b.HasKey("ApplicantsId", "WitnessesId");

                    b.HasIndex("WitnessesId");

                    b.ToTable("ApplicantWitness");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressApplicant")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Partner", "Partner")
                        .WithMany("Applicants")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Religion")
                        .WithMany("ApplicantReligions")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", "Repersentative")
                        .WithMany("RepresentativeApplicants")
                        .HasForeignKey("RepersentativeId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Address");

                    b.Navigation("Partner");

                    b.Navigation("Religion");

                    b.Navigation("Repersentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.AppLookJobtitle", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "ApplicantJobtitle")
                        .WithMany("LookUpJobTitles")
                        .HasForeignKey("ApplicantJobtitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUpJobtitle")
                        .WithMany("LookUpJobTitles")
                        .HasForeignKey("LookUpJobtitleId");

                    b.Navigation("ApplicantJobtitle");

                    b.Navigation("LookUpJobtitle");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Award", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "AwardEducation")
                        .WithMany("EducationAawards")
                        .HasForeignKey("AwardEducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "AwardLookUp")
                        .WithOne("AwardEducations")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Award", "AwardLookUpId");

                    b.Navigation("AwardEducation");

                    b.Navigation("AwardLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("BankAccount")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.BankAccount", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Beneficiary", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "Relationship")
                        .WithMany("BeneficiaryRelationShip")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "EducationApplicant")
                        .WithOne("ApplicantEducation")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "EducationApplicantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EducationApplicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressEmergContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithOne("EmergencyContact")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.EmergencyContact", "ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Experiences")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "CountryLookup")
                        .WithOne("LookupExpeeriences")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Experience", "CountryLookupId");

                    b.Navigation("Applicant");

                    b.Navigation("CountryLookup");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "Applicant")
                        .WithMany("Languages")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LanguageLookUp")
                        .WithOne("LookupLanguage")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Language", "LanguageLookUpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Applicant");

                    b.Navigation("LanguageLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.LevelOfQualification", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "LevelOfQualificationEducation")
                        .WithMany("EducationLevelofQualifications")
                        .HasForeignKey("LevelOfQualificationEducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LevelOfQualificationLookUp")
                        .WithOne("LookUpLevelOfQualifications")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.LevelOfQualification", "LevelOfQualificationLookUpId");

                    b.Navigation("LevelOfQualificationEducation");

                    b.Navigation("LevelOfQualificationLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.QualificationType", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", "QualificationTypeEducation")
                        .WithMany("EducationQualificationTypes")
                        .HasForeignKey("QualificationTypeEducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "QualificationTypeLookUp")
                        .WithOne("LookUpQualificationTypes")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.QualificationType", "QualificationTypeLookUpId");

                    b.Navigation("QualificationTypeEducation");

                    b.Navigation("QualificationTypeLookUp");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithOne("AddressRepresentative")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.TechnicalSkill", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "ApplicantTechnicalSkill")
                        .WithMany("TechnicalSkills")
                        .HasForeignKey("ApplicantTechnicalSkillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.LookUp", "LookUpTechnicalSkill")
                        .WithOne("LookupTechnicalSkill")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Applicants.TechnicalSkill", "LookUpTechnicalSkillId");

                    b.Navigation("ApplicantTechnicalSkill");

                    b.Navigation("LookUpTechnicalSkill");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", "ApplicantAttachmentFile")
                        .WithMany("AttachmentFiles")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Attachment", "Attachment")
                        .WithOne("AttachmentFile")
                        .HasForeignKey("AppDiv.SmartAgency.Domain.Entities.Base.AttachmentFile", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantAttachmentFile");

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Customer", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Settings.Suffix", "Suffix")
                        .WithMany()
                        .HasForeignKey("SuffixId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("Suffix");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Category", "Category")
                        .WithMany("LookUps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Base.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ApplicantWitness", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.Applicants.Witness", null)
                        .WithMany()
                        .HasForeignKey("WitnessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppDiv.SmartAgency.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Applicant", b =>
                {
                    b.Navigation("ApplicantEducation");

                    b.Navigation("AttachmentFiles");

                    b.Navigation("BankAccount");

                    b.Navigation("Beneficiaries");

                    b.Navigation("EmergencyContact");

                    b.Navigation("Experiences");

                    b.Navigation("Languages");

                    b.Navigation("LookUpJobTitles");

                    b.Navigation("TechnicalSkills");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Education", b =>
                {
                    b.Navigation("EducationAawards");

                    b.Navigation("EducationLevelofQualifications");

                    b.Navigation("EducationQualificationTypes");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Applicants.Repersentative", b =>
                {
                    b.Navigation("RepresentativeApplicants");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Attachment", b =>
                {
                    b.Navigation("AttachmentFile");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Base.Address", b =>
                {
                    b.Navigation("AddressApplicant");

                    b.Navigation("AddressEmergContact");

                    b.Navigation("AddressRepresentative");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Category", b =>
                {
                    b.Navigation("LookUps");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.LookUp", b =>
                {
                    b.Navigation("ApplicantReligions");

                    b.Navigation("AwardEducations");

                    b.Navigation("BeneficiaryRelationShip");

                    b.Navigation("LookUpJobTitles");

                    b.Navigation("LookUpLevelOfQualifications");

                    b.Navigation("LookUpQualificationTypes");

                    b.Navigation("LookupExpeeriences");

                    b.Navigation("LookupLanguage");

                    b.Navigation("LookupTechnicalSkill");
                });

            modelBuilder.Entity("AppDiv.SmartAgency.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Applicants");
                });
#pragma warning restore 612, 618
        }
    }
}
